{"logs": [], "results": [{"node": {"raw_sql": "{{ config(materialized='table') }}\n\n--- \n--- get the source data from the GBFS web feeds\n---\n\nselect $1 data,\n    $2 url, citibike.utils.fetch_http_data($2) payload,\n    current_timestamp() row_inserted\nfrom (values\n    ('regions', 'https://gbfs.citibikenyc.com/gbfs/en/system_regions.json'),\n    ('stations', 'https://gbfs.citibikenyc.com/gbfs/en/station_information.json'),\n    ('neighborhoods', 'https://snowflake-demo-stuff.s3.amazonaws.com/neighborhoods.geojson'))", "compiled": true, "database": "citibike", "schema": "dbt_aeldridge", "fqn": ["citibike", "source", "gbfs_json"], "unique_id": "model.citibike.gbfs_json", "package_name": "citibike", "root_path": "/usr/src/develop/user-10267/environment-12627/repository-10327", "path": "source/gbfs_json.sql", "original_file_path": "models/source/gbfs_json.sql", "name": "gbfs_json", "resource_type": "model", "alias": "gbfs_json", "checksum": {"name": "sha256", "checksum": "63aeadc5f36d4743613d48e27f1d803cddea83190cc53375b884d7ceea77faf1"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": "citibike", "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/citibike/models/source/gbfs_json.sql", "deferred": false, "compiled_sql": "\n\n--- \n--- get the source data from the GBFS web feeds\n---\n\nselect $1 data,\n    $2 url, citibike.utils.fetch_http_data($2) payload,\n    current_timestamp() row_inserted\nfrom (values\n    ('regions', 'https://gbfs.citibikenyc.com/gbfs/en/system_regions.json'),\n    ('stations', 'https://gbfs.citibikenyc.com/gbfs/en/station_information.json'),\n    ('neighborhoods', 'https://snowflake-demo-stuff.s3.amazonaws.com/neighborhoods.geojson'))", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n--- \n--- get the source data from the GBFS web feeds\n---\n\nselect $1 data,\n    $2 url, citibike.utils.fetch_http_data($2) payload,\n    current_timestamp() row_inserted\nfrom (values\n    ('regions', 'https://gbfs.citibikenyc.com/gbfs/en/system_regions.json'),\n    ('stations', 'https://gbfs.citibikenyc.com/gbfs/en/station_information.json'),\n    ('neighborhoods', 'https://snowflake-demo-stuff.s3.amazonaws.com/neighborhoods.geojson'))"}, "error": null, "status": "SUCCESS 1", "execution_time": 13.45794939994812, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-20T05:11:21.978062Z", "completed_at": "2020-10-20T05:11:22.012092Z"}, {"name": "execute", "started_at": "2020-10-20T05:11:22.012411Z", "completed_at": "2020-10-20T05:11:34.975098Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select v,\n       convert_timezone('UTC', 'US/Eastern', v:time::timestamp_ntz) t\nfrom citibike_reset.citibike_reset_v3.weather_json\nwhere v:city.country::string=\\'US\\'", "compiled": true, "database": "citibike", "schema": "dbt_aeldridge", "fqn": ["citibike", "source", "weather"], "unique_id": "model.citibike.weather", "package_name": "citibike", "root_path": "/usr/src/develop/user-10267/environment-12627/repository-10327", "path": "source/weather.sql", "original_file_path": "models/source/weather.sql", "name": "weather", "resource_type": "model", "alias": "weather", "checksum": {"name": "sha256", "checksum": "7a9d5ca3c1fd544795725a3e46651223b9f775a789d38bece0bd91fdc063c5a7"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": "citibike", "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/citibike/models/source/weather.sql", "deferred": false, "compiled_sql": "select v,\n       convert_timezone('UTC', 'US/Eastern', v:time::timestamp_ntz) t\nfrom citibike_reset.citibike_reset_v3.weather_json\nwhere v:city.country::string=\\'US\\'", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select v,\n       convert_timezone('UTC', 'US/Eastern', v:time::timestamp_ntz) t\nfrom citibike_reset.citibike_reset_v3.weather_json\nwhere v:city.country::string=\\'US\\'"}, "error": "Database Error in model weather (models/source/weather.sql)\n  001003 (42000): SQL compilation error:\n  syntax error line 5 at position 29 unexpected '\\''.\n  parse error line 5 at position 34 near '39'.\n  compiled SQL at target/run/citibike/models/source/weather.sql", "status": "ERROR", "execution_time": 3.452458381652832, "thread_id": "Thread-1", "timing": [], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--\n-- populate the trips table from the reset DB\n--\n\nselect *\nfrom citibike_reset.citibike_reset_v3.trips", "compiled": true, "database": "citibike", "schema": "dbt_aeldridge", "fqn": ["citibike", "source", "trips"], "unique_id": "model.citibike.trips", "package_name": "citibike", "root_path": "/usr/src/develop/user-10267/environment-12627/repository-10327", "path": "source/trips.sql", "original_file_path": "models/source/trips.sql", "name": "trips", "resource_type": "model", "alias": "trips", "checksum": {"name": "sha256", "checksum": "e6b0e68d17ae0fc1c5c40cce3d5c7c8c4870fc78045f6a224d1c04cec5417dd9"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": "citibike", "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/citibike/models/source/trips.sql", "deferred": false, "compiled_sql": "--\n-- populate the trips table from the reset DB\n--\n\nselect *\nfrom citibike_reset.citibike_reset_v3.trips", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--\n-- populate the trips table from the reset DB\n--\n\nselect *\nfrom citibike_reset.citibike_reset_v3.trips"}, "error": null, "status": "SUCCESS 1", "execution_time": 18.56870460510254, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-20T05:11:38.894724Z", "completed_at": "2020-10-20T05:11:38.922927Z"}, {"name": "execute", "started_at": "2020-10-20T05:11:38.923345Z", "completed_at": "2020-10-20T05:11:57.001824Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='table') }}\n\n--- \n--- materialise the station records augmented with neighborhood data\n---\n\nwith s as (\n    select * from {{ ref('station_nhood_json') }}\n      where row_inserted = (select max(row_inserted) from {{ ref('station_json') }})),\nr as (\n    select * from {{ ref('region_json') }}\n      where row_inserted = (select max(row_inserted) from {{ ref('region_json') }}))\nselect station_v:station_id::number station_id,\n    station_v:name::string station_name,\n    station_v:lat::float station_lat,\n    station_v:lon::float station_lon,\n    station_geo,\n    station_v:station_type::string station_type,\n    station_v:capacity::number station_capacity,\n    station_v:rental_methods rental_methods,\n    region_v:name::string region_name,\n    borough_name, neighborhood_name\nfrom s left outer join r\n    on station_v:region_id::integer = region_v:region_id::integer", "compiled": true, "database": "citibike", "schema": "dbt_aeldridge", "fqn": ["citibike", "mart", "stations"], "unique_id": "model.citibike.stations", "package_name": "citibike", "root_path": "/usr/src/develop/user-10267/environment-12627/repository-10327", "path": "mart/stations.sql", "original_file_path": "models/mart/stations.sql", "name": "stations", "resource_type": "model", "alias": "stations", "checksum": {"name": "sha256", "checksum": "a4993641c89461afc5ff5d5d04298a23195dfc883a48fc73022a2cb7004fc589"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": "citibike", "tags": [], "full_refresh": null}, "tags": [], "refs": [["station_nhood_json"], ["station_json"], ["region_json"], ["region_json"]], "sources": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"], "nodes": ["model.citibike.station_nhood_json", "model.citibike.station_json", "model.citibike.region_json", "model.citibike.region_json"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/citibike/models/mart/stations.sql", "deferred": false, "compiled_sql": "\n\n--- \n--- materialise the station records augmented with neighborhood data\n---\n\nwith s as (\n    select * from __dbt__CTE__station_nhood_json\n      where row_inserted = (select max(row_inserted) from __dbt__CTE__station_json)),\nr as (\n    select * from __dbt__CTE__region_json\n      where row_inserted = (select max(row_inserted) from __dbt__CTE__region_json))\nselect station_v:station_id::number station_id,\n    station_v:name::string station_name,\n    station_v:lat::float station_lat,\n    station_v:lon::float station_lon,\n    station_geo,\n    station_v:station_type::string station_type,\n    station_v:capacity::number station_capacity,\n    station_v:rental_methods rental_methods,\n    region_v:name::string region_name,\n    borough_name, neighborhood_name\nfrom s left outer join r\n    on station_v:region_id::integer = region_v:region_id::integer", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.citibike.station_json", "sql": " __dbt__CTE__station_json as (\n\n\n--\n-- get the station data in JSON format\n--\n\nwith s as (\n    select payload, row_inserted from citibike.dbt_aeldridge.gbfs_json\n      where data = 'stations'\n      and row_inserted = (select max(row_inserted) from citibike.dbt_aeldridge.gbfs_json))\nselect value station_v,\n         payload:response.last_updated::timestamp last_updated,\n         row_inserted\nfrom s, lateral flatten (input => payload:response.data.stations)\n)"}, {"id": "model.citibike.nhood_json", "sql": " __dbt__CTE__nhood_json as (\n\n\n--\n-- get the neighborhood data in JSON format\n--\n\nwith n as (\n    select payload, row_inserted from citibike.dbt_aeldridge.gbfs_json\n      where data = 'neighborhoods'\n      and row_inserted = (select max(row_inserted) from citibike.dbt_aeldridge.gbfs_json))\nselect value neighborhood_v,\n    to_geography(value:geometry) geo,\n    value:properties.borough::string borough,\n    value:properties.neighborhood::string neighborhood\nfrom n, lateral flatten (input => payload:response.features)\n)"}, {"id": "model.citibike.station_nhood_json", "sql": " __dbt__CTE__station_nhood_json as (\n\n\n---\n--- augment the station records with the neighborhood they are in\n---\n\nselect station_v,\n    last_updated,\n    row_inserted,\n    st_point(station_v:lon::float, station_v:lat::float) station_geo,\n    borough borough_name,\n    neighborhood neighborhood_name\nfrom __dbt__CTE__station_json inner join __dbt__CTE__nhood_json\nwhere st_within(station_geo, geo)\n)"}, {"id": "model.citibike.region_json", "sql": " __dbt__CTE__region_json as (\n\n\n--\n-- get the region data in JSON format\n--\n\nwith r as (\n  select payload, row_inserted from citibike.dbt_aeldridge.gbfs_json\n      where data = 'regions'\n      and row_inserted = (select max(row_inserted) from citibike.dbt_aeldridge.gbfs_json))\nselect value region_v,\n         payload:response.last_updated::timestamp last_updated,\n         row_inserted\nfrom r, lateral flatten (input => payload:response.data.regions)\n)"}], "injected_sql": "\n\n--- \n--- materialise the station records augmented with neighborhood data\n---\n\nwith  __dbt__CTE__station_json as (\n\n\n--\n-- get the station data in JSON format\n--\n\nwith s as (\n    select payload, row_inserted from citibike.dbt_aeldridge.gbfs_json\n      where data = 'stations'\n      and row_inserted = (select max(row_inserted) from citibike.dbt_aeldridge.gbfs_json))\nselect value station_v,\n         payload:response.last_updated::timestamp last_updated,\n         row_inserted\nfrom s, lateral flatten (input => payload:response.data.stations)\n),  __dbt__CTE__nhood_json as (\n\n\n--\n-- get the neighborhood data in JSON format\n--\n\nwith n as (\n    select payload, row_inserted from citibike.dbt_aeldridge.gbfs_json\n      where data = 'neighborhoods'\n      and row_inserted = (select max(row_inserted) from citibike.dbt_aeldridge.gbfs_json))\nselect value neighborhood_v,\n    to_geography(value:geometry) geo,\n    value:properties.borough::string borough,\n    value:properties.neighborhood::string neighborhood\nfrom n, lateral flatten (input => payload:response.features)\n),  __dbt__CTE__station_nhood_json as (\n\n\n---\n--- augment the station records with the neighborhood they are in\n---\n\nselect station_v,\n    last_updated,\n    row_inserted,\n    st_point(station_v:lon::float, station_v:lat::float) station_geo,\n    borough borough_name,\n    neighborhood neighborhood_name\nfrom __dbt__CTE__station_json inner join __dbt__CTE__nhood_json\nwhere st_within(station_geo, geo)\n),  __dbt__CTE__region_json as (\n\n\n--\n-- get the region data in JSON format\n--\n\nwith r as (\n  select payload, row_inserted from citibike.dbt_aeldridge.gbfs_json\n      where data = 'regions'\n      and row_inserted = (select max(row_inserted) from citibike.dbt_aeldridge.gbfs_json))\nselect value region_v,\n         payload:response.last_updated::timestamp last_updated,\n         row_inserted\nfrom r, lateral flatten (input => payload:response.data.regions)\n),s as (\n    select * from __dbt__CTE__station_nhood_json\n      where row_inserted = (select max(row_inserted) from __dbt__CTE__station_json)),\nr as (\n    select * from __dbt__CTE__region_json\n      where row_inserted = (select max(row_inserted) from __dbt__CTE__region_json))\nselect station_v:station_id::number station_id,\n    station_v:name::string station_name,\n    station_v:lat::float station_lat,\n    station_v:lon::float station_lon,\n    station_geo,\n    station_v:station_type::string station_type,\n    station_v:capacity::number station_capacity,\n    station_v:rental_methods rental_methods,\n    region_v:name::string region_name,\n    borough_name, neighborhood_name\nfrom s left outer join r\n    on station_v:region_id::integer = region_v:region_id::integer"}, "error": null, "status": "SUCCESS 1", "execution_time": 5.289381504058838, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-20T05:11:57.607872Z", "completed_at": "2020-10-20T05:11:57.647781Z"}, {"name": "execute", "started_at": "2020-10-20T05:11:57.648094Z", "completed_at": "2020-10-20T05:12:02.435871Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='view') }}\n\n--\n-- trip data enhanced with station location data\n--\n\nselect *\nfrom {{ source('demo', 'trips') }} t\n     left outer join {{ ref('ss') }} ss  on t.start_station_id = ss.start_stn_id\n     left outer join {{ ref('es') }} es  on t.end_station_id = es.end_stn_id", "compiled": true, "database": "citibike", "schema": "dbt_aeldridge", "fqn": ["citibike", "mart", "trips_stations_vw"], "unique_id": "model.citibike.trips_stations_vw", "package_name": "citibike", "root_path": "/usr/src/develop/user-10267/environment-12627/repository-10327", "path": "mart/trips_stations_vw.sql", "original_file_path": "models/mart/trips_stations_vw.sql", "name": "trips_stations_vw", "resource_type": "model", "alias": "trips_stations_vw", "checksum": {"name": "sha256", "checksum": "d59d09ddffd8f39f191b2396704bb5ce3194069f75a0224b93749452d0718a90"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": "citibike", "tags": [], "full_refresh": null}, "tags": [], "refs": [["ss"], ["es"]], "sources": [["demo", "trips"]], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"], "nodes": ["source.citibike.demo.trips", "model.citibike.ss", "model.citibike.es"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/citibike/models/mart/trips_stations_vw.sql", "deferred": false, "compiled_sql": "\n\n--\n-- trip data enhanced with station location data\n--\n\nselect *\nfrom citibike.demo.trips t\n     left outer join __dbt__CTE__ss ss  on t.start_station_id = ss.start_stn_id\n     left outer join __dbt__CTE__es es  on t.end_station_id = es.end_stn_id", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.citibike.ss", "sql": " __dbt__CTE__ss as (\n\n\nselect station_id start_stn_id,\n    station_name start_station, region_name start_region,\n    borough_name start_borough, neighborhood_name start_neighborhood,\n    station_lat start_lat, station_lon start_lon, station_geo start_geo\nfrom citibike.dbt_aeldridge.stations\n)"}, {"id": "model.citibike.es", "sql": " __dbt__CTE__es as (\n\n\nselect station_id end_stn_id,\n    station_name end_station, region_name end_region,\n    borough_name end_borough, neighborhood_name end_neighborhood,\n    station_lat end_lat, station_lon end_lon, station_geo end_geo\nfrom citibike.dbt_aeldridge.stations\n)"}], "injected_sql": "\n\nwith __dbt__CTE__ss as (\n\n\nselect station_id start_stn_id,\n    station_name start_station, region_name start_region,\n    borough_name start_borough, neighborhood_name start_neighborhood,\n    station_lat start_lat, station_lon start_lon, station_geo start_geo\nfrom citibike.dbt_aeldridge.stations\n),  __dbt__CTE__es as (\n\n\nselect station_id end_stn_id,\n    station_name end_station, region_name end_region,\n    borough_name end_borough, neighborhood_name end_neighborhood,\n    station_lat end_lat, station_lon end_lon, station_geo end_geo\nfrom citibike.dbt_aeldridge.stations\n)--\n-- trip data enhanced with station location data\n--\n\nselect *\nfrom citibike.demo.trips t\n     left outer join __dbt__CTE__ss ss  on t.start_station_id = ss.start_stn_id\n     left outer join __dbt__CTE__es es  on t.end_station_id = es.end_stn_id"}, "error": null, "status": "SUCCESS 1", "execution_time": 2.6391448974609375, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-10-20T05:12:02.958290Z", "completed_at": "2020-10-20T05:12:02.993589Z"}, {"name": "execute", "started_at": "2020-10-20T05:12:02.993944Z", "completed_at": "2020-10-20T05:12:05.135368Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(materialized='view') }}\n\n--\n-- connecting the trip and the weather data together\n--\n\nselect *\nfrom {{ ref('trips_stations_vw') }} \n    left outer join {{ ref('weather_vw') }} on date_trunc('hour', starttime) = observation_time\nwhere city_id = 5128638", "database": "citibike", "schema": "dbt_aeldridge", "fqn": ["citibike", "mart", "trips_stations_weather_vw"], "unique_id": "model.citibike.trips_stations_weather_vw", "package_name": "citibike", "root_path": "/usr/src/develop/user-10267/environment-12627/repository-10327", "path": "mart/trips_stations_weather_vw.sql", "original_file_path": "models/mart/trips_stations_weather_vw.sql", "name": "trips_stations_weather_vw", "resource_type": "model", "alias": "trips_stations_weather_vw", "checksum": {"name": "sha256", "checksum": "813a05a5324e374c6142acabec7978872f068fb3606532341c0273aecaab6d00"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": "citibike", "tags": [], "full_refresh": null}, "tags": [], "refs": [["trips_stations_vw"], ["weather_vw"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.citibike.trips_stations_vw", "model.citibike.weather_vw"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "error": null, "status": null, "execution_time": 0, "thread_id": null, "timing": [], "fail": null, "warn": null, "skip": true}], "generated_at": "2020-10-20T05:12:07.902886Z", "elapsed_time": 52.449641942977905}